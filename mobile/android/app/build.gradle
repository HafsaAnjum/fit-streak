
apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "com.facebook.react"

import com.android.build.OutputFile

react {
    /* The name of the generated asset file containing your JS bundle */
    bundleAssetName = "index.android.bundle"

    /* The entry file for bundle generation. */
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootProject.projectDir.parentFile.path, "android", "absolute"].execute().text.trim())

    /* The CLI tools to run. */
    cliPath = "../../node_modules/react-native/cli.js"

    /* The root of your project, i.e. where "package.json" lives */
    root = rootProject.projectDir.parentFile.path

    /* Where to put the JS bundle assets in debug mode */
    jsBundleDirDebug = "$buildDir/intermediates/assets/debug"

    /* Where to put the JS bundle assets in release mode */
    jsBundleDirRelease = "$buildDir/intermediates/assets/release"

    /* Where to put drawable resources / React Native assets, e.g. the ones you use via
       require('./image.png')/import image from 'image.png' */
    resourcesDirDebug = "$buildDir/intermediates/res/merged/debug"
    resourcesDirRelease = "$buildDir/intermediates/res/merged/release"

    /* Where to put JS bundle libs in debug mode */
    jsIntermediateSourcemapFileDebug = "$buildDir/generated/sourcemaps/react/debug/index.android.bundle.map"

    /* Where to put JS bundle libs in release mode */
    jsIntermediateSourcemapFileRelease = "$buildDir/generated/sourcemaps/react/release/index.android.bundle.map"

    /* Where to put JS bundle sourcemap in debug mode */
    jsSourcemapFileDebug = "$jsBundleDirDebug/index.android.bundle.map"

    /* Where to put JS bundle sourcemap in release mode */
    jsSourcemapFileRelease = "$jsBundleDirRelease/index.android.bundle.map"
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace "com.fitstreak.companion"

    defaultConfig {
        applicationId "com.fitstreak.companion"
        minSdkVersion 26 // Health Connect requires at least API 26
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.0.0")

    // Add Health Connect dependency
    implementation("androidx.health:health-connect-client:1.0.0-alpha11")
    
    debugImplementation("com.facebook.flipper:flipper:0.182.0")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:0.182.0")
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:0.182.0")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
apply from: file("../../node_modules/react-native/react.gradle")
